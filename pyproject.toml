[tool.poetry]
name = "langchain-arcade"
version = "0.1.0"
description = "An integration package connecting Arcade AI and LangChain"
authors = ["Arcade AI <dev@arcade-ai.com>"]
readme = "README.md"
repository = "https://github.com/arcadeai/langchain-arcade"
license = "MIT"

[tool.poetry.dependencies]
python = ">=3.9,<3.12.4"
langchain-core = "^0.3.0"
arcadepy = "~0.0.11"
langgraph = ">=0.2.32,<0.3.0"
langchain-openai = ">=0.2.1"
python-dotenv = ">=1.0.1"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.4.3"
pytest-asyncio = "^0.23.2"

[tool.poetry.group.codespell]
optional = true

[tool.poetry.group.codespell.dependencies]
codespell = "^2.2.6"

[tool.poetry.group.test_integration]
optional = true

[tool.poetry.group.test_integration.dependencies]

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
ruff = "^0.1.8"
mypy = "^1.7.1"



[tool.ruff.lint]
select = [
  "E",    # pycodestyle
  "F",    # pyflakes
  "I",    # isort
  "T201", # print
]

[tool.mypy]
disallow_untyped_defs = "True"

[tool.coverage.run]
omit = ["tests/*"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
addopts = "--strict-markers --strict-config --durations=5"
# Registering custom markers.
# https://docs.pytest.org/en/7.1.x/example/markers.html#registering-markers
markers = [
  "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"
